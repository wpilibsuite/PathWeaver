import org.gradle.internal.os.OperatingSystem
import java.nio.file.Paths
import java.nio.file.Files
import java.nio.file.attribute.PosixFilePermission

configurations {
    processstarter
}

def wpilibClassifier = wpilibTools.deps.platformMapper.wpilibClassifier
def wpilibVersion = wpilibTools.deps.wpilibVersion

dependencies {
    processstarter "edu.wpi.first.tools:processstarter:$wpilibVersion:$wpilibClassifier@zip"
}

tasks.register("extractProcessStarterBinary", Sync) {
    from(project.zipTree(configurations.processstarter.resolvedConfiguration.resolvedArtifacts.first().file)) {
        exclude "LICENSE.md"
        exclude "ThirdPartyNotices.txt"
        eachFile {
            def oldName = name
            name = name.replace('processstarter', 'PathWeaver')
        }
    }
    into "$buildDir/procstarter"

    if (!OperatingSystem.current().isWindows()) {
        doLast {
            new File("$buildDir/procstarter").eachFileRecurse { def file ->
                def path = Paths.get(file.absolutePath)
                def perms = Files.getPosixFilePermissions(path)
                perms << PosixFilePermission.OWNER_EXECUTE << PosixFilePermission.GROUP_EXECUTE << PosixFilePermission.OTHERS_EXECUTE
                Files.setPosixFilePermissions(path, perms)
            }
        }
    }
}

tasks.register("createProcessStarterBundle", Sync) {
    if (OperatingSystem.current().isMacOsX()) {
        from(extractProcessStarterBinary) {
            into "/${rootProject.name}.app/Contents/MacOS"
        }
        from(project.file("Info.plist")) {
            into "/${rootProject.name}.app/Contents"
        }
    } else {
        from extractProcessStarterBinary
    }

    into ("$buildDir/bundle")
}

tasks.register('createProcessStarterZip', Zip) {
    from createProcessStarterBundle

    classifier = wpilibTools.deps.platformMapper.currentPlatform.platformName
    archiveBaseName = "${rootProject.name}Launcher"
    archiveVersion = ""

    destinationDirectory = project.file("$buildDir/bundleZip")
}

copyAllOutputs.configure {
    dependsOn createProcessStarterZip
    from createProcessStarterZip
}
